<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tiantian.dao.TbBlackMapper" >
  <resultMap id="BaseResultMap" type="com.tiantian.pojo.TbBlack" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="oid" property="oid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, uid, oid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.tiantian.pojo.TbBlackExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_black
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from tb_black
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_black
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.tiantian.pojo.TbBlackExample" >
    delete from tb_black
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.tiantian.pojo.TbBlack" >
    insert into tb_black (id, uid, oid)
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{oid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.tiantian.pojo.TbBlack" >
    insert into tb_black
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="oid != null" >
        oid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="oid != null" >
        #{oid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tiantian.pojo.TbBlackExample" resultType="java.lang.Integer" >
    select count(*) from tb_black
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update tb_black
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null" >
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.oid != null" >
        oid = #{record.oid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update tb_black
    set id = #{record.id,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      oid = #{record.oid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tiantian.pojo.TbBlack" >
    update tb_black
    <set >
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="oid != null" >
        oid = #{oid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tiantian.pojo.TbBlack" >
    update tb_black
    set uid = #{uid,jdbcType=INTEGER},
      oid = #{oid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
<select id="findAllFriendsWithBlack" resultType="tbUserWithBlackDto">



<!-- 	SELECT 
	 b.id tbBlack.id, b.uid tbBlack.uid, b.oid tbBlack.oid,
	c.id tbUser.id, c.username tbUser.username, c.password tbUser.password, c.onlineStatus tbUser.onlineStatus, c.phone tbUser.phone, 
	c.email tbUser.email , c.createDate tbUser.createDate, c.updateDate tbUser.updateDate, c.profilePhoto  tbUser. profilePhoto 
	 FROM 
tb_friends a LEFT JOIN tb_black b  ON a.useId=b.`uid` AND a.`friendId`=b.`oid`
LEFT JOIN tb_user c ON a.`friendId`=c.`id`
WHERE a.`useId`=#{id} ; -->
SELECT 
	 b.id 'tbBlack.id', b.uid 'tbBlack.uid', b.oid 'tbBlack.oid',
	c.id 'tbUser.id', c.username 'tbUser.username', c.password 'tbUser.password', c.onlineStatus 'tbUser.onlineStatus', 
	c.phone 'tbUser.phone', 
	c.email 'tbUser.email' , c.createDate 'tbUser.createDate', c.updateDate 'tbUser.updateDate', c.profilePhoto  'tbUser.profilePhoto' 
	 FROM 
tb_friends a LEFT JOIN tb_black b  ON a.useId=b.`uid` AND a.`friendId`=b.`oid`
LEFT JOIN tb_user c ON a.`friendId`=c.`id`
WHERE a.`useId`=#{id} 
</select>
  
  
</mapper>